import asyncio
import logging
import pandas as pd
import re
import os
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from typing import Union
from aiogram.exceptions import TelegramBadRequest

logging.basicConfig(level=logging.INFO)
bot = Bot(token='8104630789:AAGAZ-ITfW3F0Rtno-h8iFUIiKqkxl1gqu0')
dp = Dispatcher()
FILE_PUT = "donors.xlsx"

# ID —á–∞—Ç–∞, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "-1002709368305"))
# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è –æ–ø—Ä–æ—Å–æ–≤ –∏ –ª–∏–º–∏—Ç–æ–≤
questions_map: dict[int, int] = {}
last_question_time: dict[int, float] = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–í–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º"), KeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")],
        [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ"), KeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–Ω–∞—Ü–∏—é")]
    ],
    resize_keyboard=True
)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ ¬´–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
back_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
knopka_dlya_nomera = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä üì±", request_contact=True)]],
    resize_keyboard=True
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---

class SostoyaniyaRegistracii(StatesGroup):
    ozhidanie_soglasiya = State()
    ozhidanie_fio = State()
    ozhidanie_kategorii = State()
    ozhidanie_gruppy = State()
    podtverzhdenie_fio = State()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –î–î ---
class SostoyaniyaDD(StatesGroup):
    vybor_daty = State()
    prichina_neyavki = State()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ ---
class SostoyaniyaVoprosa(StatesGroup):
    ozhidanie_voprosa = State()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è
knopki_soglasiya = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", callback_data="soglasen")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
knopki_kategoriy = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç", callback_data="kategoriya_student")],
        [InlineKeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫", callback_data="kategoriya_sotrudnik")],
        [InlineKeyboardButton(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä", callback_data="kategoriya_vneshniy")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ò–û
knopki_podtverzhdeniya_fio = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —ç—Ç–æ —è", callback_data="fio_verno")],
        [InlineKeyboardButton(text="–ù–µ—Ç, —ç—Ç–æ –Ω–µ —è", callback_data="fio_neverno")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ–ø—Ä–æ—Å–∞ –æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—è–≤–∫–∏
knopki_oprosa_neyavki = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ú–µ–¥–æ—Ç–≤–æ–¥ (–±–æ–ª–µ–∑–Ω—å)", callback_data="opros_medotvod")],
        [InlineKeyboardButton(text="–õ–∏—á–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã", callback_data="opros_lichnye")],
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–¥—É–º–∞–ª(–∞)", callback_data="opros_peredumal")],
    ]
)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–Ω—Ñ–æ-—Ä–∞–∑–¥–µ–ª–æ–≤ ---
knopki_info = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫—Ä–æ–≤–∏", callback_data="info_krov")],
        [InlineKeyboardButton(text="–û –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞", callback_data="info_kostniy_mozg")],
        [InlineKeyboardButton(text="–û –¥–æ–Ω–∞—Ü–∏—è—Ö –≤ –ú–ò–§–ò", callback_data="info_mifi")]
    ]
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏, –∫–æ—Ç–æ—Ä—É—é –º—ã –ø–æ–∫–∞–∂–µ–º –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
knopka_svyazi_konflikt = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º", callback_data="ask_question_inline")]
    ]
)

# –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª –¥–ª—è –∏–Ω—Ñ–æ-—Ä–∞–∑–¥–µ–ª–æ–≤
knopka_info_back = InlineKeyboardMarkup(
    inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="info_back")]]
)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel ---

def nayti_usera_po_telegram_id(telegram_id):
    try:
        df = pd.read_excel(FILE_PUT, engine='openpyxl')
        if '–¢–µ–ª–µ–≥—Ä–∞–º' not in df.columns:
            return None
        df['–¢–µ–ª–µ–≥—Ä–∞–º'] = df['–¢–µ–ª–µ–≥—Ä–∞–º'].astype(str).str.replace(r'\.0$', '', regex=True)
        match = df[df['–¢–µ–ª–µ–≥—Ä–∞–º'] == str(telegram_id)]
        if not match.empty:
            return match.iloc[0]
    except FileNotFoundError:
        return None
    return None

def nayti_usera_po_nomeru(nomer_telefona):
    try:
        baza_dannyh = pd.read_excel(FILE_PUT, engine='openpyxl')
        baza_dannyh['–¢–µ–ª–µ—Ñ–æ–Ω'] = baza_dannyh['–¢–µ–ª–µ—Ñ–æ–Ω'].astype(str).str.replace(r'\D', '', regex=True)
        user = baza_dannyh[baza_dannyh['–¢–µ–ª–µ—Ñ–æ–Ω'].str.contains(nomer_telefona, na=False)]
        if not user.empty:
            return user.iloc[0]
    except FileNotFoundError:
        return None
    return None

def obnovit_telegram_id(nomer_telefona, telegram_id):
    try:
        df = pd.read_excel(FILE_PUT, engine='openpyxl')
        df['–¢–µ–ª–µ—Ñ–æ–Ω_—á–∏—Å—Ç—ã–π'] = df['–¢–µ–ª–µ—Ñ–æ–Ω'].astype(str).str.replace(r'\D', '', regex=True)
        idx_list = df.index[df['–¢–µ–ª–µ—Ñ–æ–Ω_—á–∏—Å—Ç—ã–π'].str.contains(nomer_telefona, na=False)].tolist()
        if idx_list:
            if '–¢–µ–ª–µ–≥—Ä–∞–º' not in df.columns:
                df['–¢–µ–ª–µ–≥—Ä–∞–º'] = None
            df.loc[idx_list[0], '–¢–µ–ª–µ–≥—Ä–∞–º'] = str(telegram_id)
            df = df.drop(columns=['–¢–µ–ª–µ—Ñ–æ–Ω_—á–∏—Å—Ç—ã–π'])
            df.to_excel(FILE_PUT, index=False)
    except Exception:
        pass

def dobavit_usera(dannie):
    try:
        df = pd.read_excel(FILE_PUT, engine='openpyxl')
    except FileNotFoundError:
        df = pd.DataFrame(columns=['–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–¢–µ–ª–µ—Ñ–æ–Ω', '–¢–µ–ª–µ–≥—Ä–∞–º'])
    if '–¢–µ–ª–µ–≥—Ä–∞–º' not in df.columns:
        df['–¢–µ–ª–µ–≥—Ä–∞–º'] = None
    dannie['–¢–µ–ª–µ–≥—Ä–∞–º'] = str(dannie.get('–¢–µ–ª–µ–≥—Ä–∞–º')) if dannie.get('–¢–µ–ª–µ–≥—Ä–∞–º') else None
    noviy_user = pd.DataFrame([dannie])
    df = pd.concat([df, noviy_user], ignore_index=True)
    df.to_excel(FILE_PUT, index=False)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(Command("start"))
async def command_start(message: types.Message, state: FSMContext):
    await state.clear()
    user = nayti_usera_po_telegram_id(message.from_user.id)
    if user is not None:
        fio = user.get('–§–ò–û', '–î–æ–Ω–æ—Ä')
        phone = user.get('–¢–µ–ª–µ—Ñ–æ–Ω', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        await state.update_data(
            fio=fio, 
            nomer_telefona=phone, 
            username=message.from_user.username,
            telegram_id=message.from_user.id
        )
        await message.answer(f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {fio}!", reply_markup=menu_kb)
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
            reply_markup=knopka_dlya_nomera
        )

@dp.message(F.contact)
async def contact_handler(message: types.Message, state: FSMContext):
    nomer_telefona = message.contact.phone_number.replace("+", "")
    telegram_id = message.from_user.id
    await state.update_data(nomer_telefona=nomer_telefona, username=message.from_user.username, telegram_id=telegram_id)
    await message.answer("–°–ø–∞—Å–∏–±–æ, –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    user = nayti_usera_po_nomeru(nomer_telefona)
    if user is not None:
        obnovit_telegram_id(nomer_telefona, telegram_id)
        fio = user['–§–ò–û']
        await state.update_data(fio=fio)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã - {fio}?", reply_markup=knopki_podtverzhdeniya_fio)
        await state.set_state(SostoyaniyaRegistracii.podtverzhdenie_fio)
    else:
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å "
            "[–ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://telegra.ph/POLITIKA-NIYAU-MIFI-V-OTNOSHENII-OBRABOTKI-PERSONALNYH-DANNYH-07-18) "
            "–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="Markdown",
            disable_web_page_preview=True, # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥—Ä–æ–º–æ–∑–¥–∫–æ
            reply_markup=knopki_soglasiya
        )
        await state.set_state(SostoyaniyaRegistracii.ozhidanie_soglasiya)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è"
@dp.callback_query(SostoyaniyaRegistracii.ozhidanie_soglasiya, F.data == "soglasen")
async def obrabotchik_soglasiya(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ.")
    await state.set_state(SostoyaniyaRegistracii.ozhidanie_fio)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ò–û
@dp.callback_query(SostoyaniyaRegistracii.podtverzhdenie_fio)
async def obrabotchik_podtverzhdeniya_fio(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'fio_verno':
        await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.")
        await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)
        await state.clear()
    else:
        await callback.message.edit_text(
            "–≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            "–ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –Ω–æ –§–ò–û —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. ",
            reply_markup=knopka_svyazi_konflikt
        )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –§–ò–û
@dp.message(SostoyaniyaRegistracii.ozhidanie_fio)
async def obrabotchik_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()

    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∏–ª–∏ 3)
    if not (2 <= len(fio.split()) <= 3):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è).")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã)
    if re.search(r'[^–∞-—è–ê-–Ø—ë–Å\s-]', fio):
        await message.answer("–í –§–ò–û –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –§–ò–û –∫ –∫—Ä–∞—Å–∏–≤–æ–º—É –≤–∏–¥—É: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω-–ü–µ—Ç—Ä–æ–≤–∏—á"
    fio_krasivoe = " ".join([word.capitalize() for word in fio.split()])

    await state.update_data(fio=fio_krasivoe)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=knopki_kategoriy)
    await state.set_state(SostoyaniyaRegistracii.ozhidanie_kategorii)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(SostoyaniyaRegistracii.ozhidanie_kategorii)
async def nepravilnaya_kategoriya(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ.")

# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(SostoyaniyaRegistracii.ozhidanie_kategorii)
async def obrabotchik_kategorii(callback: types.CallbackQuery, state: FSMContext):
    kategoriya_eng = callback.data.split('_')[1] # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º 'student', 'sotrudnik' –∏–ª–∏ 'vneshniy'
    await state.update_data(kategoriya=kategoriya_eng)

    if kategoriya_eng == "student":
        await callback.message.edit_text("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
        await state.set_state(SostoyaniyaRegistracii.ozhidanie_gruppy)
    else:
        dannie_usera = await state.get_data()

        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        kategorii_map = {
            'sotrudnik': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
            'vneshniy': '–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä'
        }
        kategoriya_rus = kategorii_map.get(dannie_usera.get('kategoriya'), '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

        zapis = {
            '–¢–µ–ª–µ—Ñ–æ–Ω': dannie_usera.get('nomer_telefona'),
            '–§–ò–û': dannie_usera.get('fio'),
            '–ì—Ä—É–ø–ø–∞': kategoriya_rus,
            '–¢–µ–ª–µ–≥—Ä–∞–º': dannie_usera.get('telegram_id'),
        }
        dobavit_usera(zapis)

        await callback.message.edit_text("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.clear()
        await bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
@dp.message(SostoyaniyaRegistracii.ozhidanie_gruppy)
async def obrabotchik_gruppy(message: types.Message, state: FSMContext):
    gruppa = message.text.strip().upper()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê22-501)
    if not re.match(r'^[–ê-–Ø]\d{2}-\d{3}$', gruppa):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ X00-000, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ê22-501")
        return

    await state.update_data(gruppa=gruppa)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    dannie_usera = await state.get_data()

    zapis = {
        '–¢–µ–ª–µ—Ñ–æ–Ω': dannie_usera.get('nomer_telefona'),
        '–§–ò–û': dannie_usera.get('fio'),
        '–ì—Ä—É–ø–ø–∞': dannie_usera.get('gruppa'),
        '–¢–µ–ª–µ–≥—Ä–∞–º': dannie_usera.get('telegram_id'),
        # ... –∏ –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    }
    dobavit_usera(zapis)

    await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    # –∏ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã ---
@dp.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–Ω–æ—Ä—Å—Ç–≤–µ")
async def info_section(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:", reply_markup=knopki_info)

# –§–∏–ª—å—Ç—Ä —Ç–µ–ø–µ—Ä—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ –Ω–µ –ª–æ–≤–∏—Ç "info_back"
@dp.callback_query(F.data.in_(["info_krov", "info_kostniy_mozg", "info_mifi"]))
async def send_info(callback: types.CallbackQuery):
    action = callback.data.removeprefix("info_")
    text = ""
    if action == "krov":
        text = (
            "**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–Ω–æ—Ä–∞–º:**\n"
            "- –í–æ–∑—Ä–∞—Å—Ç –æ—Ç 18 –¥–æ 60 –ª–µ—Ç\n"
            "- –í–µ—Å –Ω–µ –º–µ–Ω–µ–µ 50 –∫–≥\n"
            "- –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π\n\n"
            "**–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–æ–Ω–∞—Ü–∏–∏:**\n"
            "- –ó–∞ 48 —á–∞—Å–æ–≤ –Ω–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –∞–ª–∫–æ–≥–æ–ª—å\n"
            "- –ù–∞–∫–∞–Ω—É–Ω–µ –≤–µ—á–µ—Ä–æ–º –ª–µ–≥–∫–∏–π —É–∂–∏–Ω\n"
            "- –£—Ç—Ä–æ–º –ª–µ–≥–∫–∏–π –∑–∞–≤—Ç—Ä–∞–∫ (—Å–ª–∞–¥–∫–∏–π —á–∞–π, —Å—É—Ö–∞—Ä–∏)\n\n"
            "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ –¶–µ–Ω—Ç—Ä–∞ –ö—Ä–æ–≤–∏."
        )
    elif action == "kostniy_mozg":
        text = (
            "**–î–æ–Ω–æ—Ä—Å—Ç–≤–æ –∫–æ—Å—Ç–Ω–æ–≥–æ –º–æ–∑–≥–∞ - —ç—Ç–æ –≤–∞–∂–Ω–æ!**\n"
            "–≠—Ç–æ —à–∞–Ω—Å —Å–ø–∞—Å—Ç–∏ –∂–∏–∑–Ω—å —á–µ–ª–æ–≤–µ–∫–∞, –±–æ–ª—å–Ω–æ–≥–æ –ª–µ–π–∫–æ–∑–æ–º –∏–ª–∏ –¥—Ä—É–≥–∏–º –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ–º –∫—Ä–æ–≤–∏.\n\n"
            "**–ö–∞–∫ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä:**\n"
            "1. –°–¥–∞—Ç—å –ø—Ä–æ–±–∏—Ä–∫—É –∫—Ä–æ–≤–∏ (4 –º–ª) –Ω–∞ –¥–æ–Ω–æ—Ä—Å–∫–æ–π –∞–∫—Ü–∏–∏.\n"
            "2. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n\n"
            "**–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–Ω–∞—Ü–∏–∏:**\n"
            "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ—Ö–æ–∂–∞ –Ω–∞ —Å–¥–∞—á—É —Ç—Ä–æ–º–±–æ—Ü–∏—Ç–æ–≤ –∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–∞."
        )
    elif action == "mifi":
        text = (
            "**–î–Ω–∏ –¥–æ–Ω–æ—Ä–∞ –≤ –ù–ò–Ø–£ –ú–ò–§–ò:**\n"
            "1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –±–æ—Ç–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –¥–∞—Ç—É.\n"
            "2. –ü—Ä–∏—Ö–æ–¥–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∏ –º–µ—Å—Ç–æ.\n"
            "3. –ù–µ –∑–∞–±—É–¥—å –ø–∞—Å–ø–æ—Ä—Ç –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!\n\n"
            "**–ë–ª–∏–∂–∞–π—à–∏–π –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞:**\n"
            "–°–ª–µ–¥–∏—Ç–µ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏!"
        )

    await callback.message.edit_text(text, parse_mode="Markdown", reply_markup=knopka_info_back)
    # –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –∏–Ω—Ñ–æ-—Ä–∞–∑–¥–µ–ª–∞
@dp.callback_query(F.data == "info_back")
async def info_back(callback: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
    await callback.message.delete()
    # –ò –ø—Ä–∏—Å—ã–ª–∞–µ–º –Ω–æ–≤–æ–µ —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–∑–¥–µ–ª–æ–≤
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:", reply_markup=knopki_info)
    await callback.answer()

# --- –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç ---
@dp.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def lichnyi_kabinet(message: types.Message):
    user_data = nayti_usera_po_telegram_id(message.from_user.id)
    if user_data is None:
        await message.answer("–•–º, –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ –±–∞–∑–µ –¥–æ–Ω–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")
        return

    fio = user_data.get('–§–ò–û', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    donations_gavrilova = user_data.get('–ö–æ–ª-–≤–æ –ì–∞–≤—Ä–∏–ª–æ–≤–∞', 0)
    donations_fmba = user_data.get('–ö–æ–ª-–≤–æ –§–ú–ë–ê', 0)
    total_donations = donations_gavrilova + donations_fmba

    last_donation_gavrilova = user_data.get('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏ –ì–∞–≤—Ä–∏–ª–æ–≤–∞')
    last_donation_fmba = user_data.get('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–æ–Ω–∞—Ü–∏–∏ –§–ú–ë–ê')

    last_donation_date = None
    last_donation_center = ""

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –¥–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if pd.notna(last_donation_gavrilova):
        date_gavrilova = pd.to_datetime(last_donation_gavrilova)
    else:
        date_gavrilova = None

    if pd.notna(last_donation_fmba):
        date_fmba = pd.to_datetime(last_donation_fmba)
    else:
        date_fmba = None

    if date_gavrilova and date_fmba:
        if date_gavrilova > date_fmba:
            last_donation_date = date_gavrilova.strftime('%d.%m.%Y')
            last_donation_center = "–≤ –¶–ö –∏–º. –ì–∞–≤—Ä–∏–ª–æ–≤–∞"
        else:
            last_donation_date = date_fmba.strftime('%d.%m.%Y')
            last_donation_center = "–≤ –¶–ö –§–ú–ë–ê"
    elif date_gavrilova:
        last_donation_date = date_gavrilova.strftime('%d.%m.%Y')
        last_donation_center = "–≤ –¶–ö –∏–º. –ì–∞–≤—Ä–∏–ª–æ–≤–∞"
    elif date_fmba:
        last_donation_date = date_fmba.strftime('%d.%m.%Y')
        last_donation_center = "–≤ –¶–ö –§–ú–ë–ê"


    text = (
        f"üë§ **–¢–≤–æ–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç**\n\n"
        f"**–§–ò–û:** {fio}\n"
        f"**–í—Å–µ–≥–æ –¥–æ–Ω–∞—Ü–∏–π:** {total_donations}\n"
    )

    if last_donation_date:
        text += f"**–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è:** {last_donation_date} {last_donation_center}\n"
    else:
        text += "**–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è:** –î–∞–Ω–Ω—ã—Ö –Ω–µ—Ç\n"

    text += "**–í —Ä–µ–≥–∏—Å—Ç—Ä–µ –î–ö–ú:** –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"  # –≠—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–∫–∞ –Ω–µ—Ç

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –î–î
    moy_zapisy = poluchit_registracii_usera(message.from_user.id)
    if moy_zapisy:
        text += "\n\n**–ú–æ–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞:**\n"
        for zapis in moy_zapisy:
            sobytie = poluchit_sobytie_po_id(zapis['event_id'])
            if sobytie is not None:
                text += f"‚Äì {sobytie['date']} –≤ {sobytie['center']}\n"
    else:
        text += "\n\n–£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞."

    await message.answer(text, parse_mode="Markdown")

# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –î–µ–Ω—å –î–æ–Ω–æ—Ä–∞ ---

@dp.message(F.text == "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–Ω–∞—Ü–∏—é")
async def zapis_na_donaciyu(message: types.Message):
    user_data = nayti_usera_po_telegram_id(message.from_user.id)
    if user_data is None:
        await message.answer("–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è, –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return
    
    sobytiya = poluchit_aktivnye_sobytiya()
    
    if sobytiya:
        knopki = []
        for sobytie in sobytiya:
            text_knopki = f"{sobytie['date']} - {sobytie['center']}"
            knopki.append([InlineKeyboardButton(text=text_knopki, callback_data=f"reg_dd_{sobytie['id']}")])
        
        klaviatura = InlineKeyboardMarkup(inline_keyboard=knopki)
        await message.answer("–û—Ç–∫—Ä—ã—Ç–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞! –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É –∏ –º–µ—Å—Ç–æ:", reply_markup=klaviatura)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞ –î–Ω–∏ –î–æ–Ω–æ—Ä–∞. –°–ª–µ–¥–∏ –∑–∞ –∞–Ω–æ–Ω—Å–∞–º–∏!")

@dp.callback_query(F.data.startswith("reg_dd_"))
async def podtverdit_zapis_na_dd(callback: types.CallbackQuery):
    await callback.answer()
    event_id = int(callback.data.split('_')[-1])
    telegram_id = callback.from_user.id

    sobytie = poluchit_sobytie_po_id(event_id)
    if sobytie is None or not sobytie['is_active']:
        await callback.message.edit_text("–ò–∑–≤–∏–Ω–∏, –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.")
        return

    if proverit_registraciyu_na_sobytie(telegram_id, event_id):
        await callback.message.edit_text("–¢—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –¥–∞—Ç—É!")
        return

    user_data = nayti_usera_po_telegram_id(telegram_id)
    fio = user_data.get('–§–ò–û', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–Ω–æ—Ä')
    category = user_data.get('–ì—Ä—É–ø–ø–∞')

    dobavit_registraciyu(event_id, telegram_id, fio)
    
    text_confirmation = f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –¥–æ–Ω–∞—Ü–∏—é {sobytie['date']} –≤ {sobytie['center']}."
    
    if category == '–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä':
        link = sobytie.get('reg_link_external')
        if link and pd.notna(link):
            text_confirmation += f"\n\n‚ùóÔ∏è**–í–ê–ñ–ù–û:** –¢–∞–∫ –∫–∞–∫ —Ç—ã –≤–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä, –ø—Ä–æ–π–¥–∏ –¥–æ–ø. —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ [—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ]({link})."

    await callback.message.edit_text(text_confirmation, parse_mode="Markdown", disable_web_page_preview=True)

# --- –í–æ–ø—Ä–æ—Å—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ---
@dp.message(F.text == "–í–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º")
async def start_question_text(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SostoyaniyaVoprosa.ozhidanie_voprosa)

@dp.message(SostoyaniyaVoprosa.ozhidanie_voprosa)
async def recieve_question(message: types.Message, state: FSMContext):
    dannie_usera = await state.get_data()
    phone = dannie_usera.get("nomer_telefona", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    fio = dannie_usera.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    username = dannie_usera.get("username") or message.from_user.username or "–Ω–µ—Ç username"

    fwd_msg = await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
    questions_map[fwd_msg.message_id] = message.from_user.id
    await bot.send_message(ADMIN_CHAT_ID, f"–í–æ–ø—Ä–æ—Å –æ—Ç {fio} (—Ç–µ–ª: {phone}, @{username})")

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.", reply_markup=menu_kb)
    await state.clear()

# –û—Ç–≤–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(F.chat.id == ADMIN_CHAT_ID, F.reply_to_message)
async def answer_to_user(message: types.Message):
    user_id = None
    if message.reply_to_message:
        user_id = questions_map.get(message.reply_to_message.message_id)
        if not user_id and message.reply_to_message.forward_from:
            user_id = message.reply_to_message.forward_from.id
    
    if user_id:
        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    else:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")

# --- –û–ø—Ä–æ—Å –æ –Ω–µ—è–≤–∫–µ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏) ---
@dp.callback_query(F.data.startswith("opros_"))
async def obrabotka_oprosa_neyavki(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    prichina = callback.data.split('_')[1]
    # –í callback.message.reply_to_message.text –º—ã –º–æ–∂–µ–º —Ö—Ä–∞–Ω–∏—Ç—å event_id, –Ω–æ —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å –Ω–∞–¥–µ–∂–Ω–æ.
    # –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –±—É–¥–µ—Ç –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—Ç—å event_id.
    # –ü–æ–∫–∞ —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–º–µ—Ä.
    # event_id = ... 
    # telegram_id = callback.from_user.id
    # obnovit_status_registracii(telegram_id, event_id, prichina)
    
    await callback.message.edit_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –æ—Ç–≤–µ—Ç! –ú—ã —É—á—Ç–µ–º —ç—Ç–æ.")
    
# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π ---

def sozdat_listy_v_excel():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ donors.xlsx –∏ –ª–∏—Å—Ç–æ–≤ 'events', 'registrations'. –°–æ–∑–¥–∞–µ—Ç –∏—Ö –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
    
    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω—É–ª—è —Å–æ –≤—Å–µ–º–∏ –ª–∏—Å—Ç–∞–º–∏
    if not os.path.exists(FILE_PUT):
        with pd.ExcelWriter(FILE_PUT, engine='openpyxl') as writer:
            # –õ–∏—Å—Ç –¥–æ–Ω–æ—Ä–æ–≤
            df_donors = pd.DataFrame(columns=['–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–¢–µ–ª–µ—Ñ–æ–Ω', '–¢–µ–ª–µ–≥—Ä–∞–º'])
            df_donors.to_excel(writer, sheet_name='donors', index=False)
            
            # –õ–∏—Å—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
            df_events = pd.DataFrame({
                'id': [1, 2], 'date': ['2023-10-27', '2023-10-28'],
                'center': ['–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏ –∏–º. –û.–ö. –ì–∞–≤—Ä–∏–ª–æ–≤–∞', '–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏ –§–ú–ë–ê'], 
                'is_active': [True, False], 
                'reg_link_external': ['https://it.mephi.ru/web/guest/den-donora', 'https://it.mephi.ru/web/guest/den-donora-2']
            })
            df_events.to_excel(writer, sheet_name='events', index=False)

            # –õ–∏—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
            df_regs = pd.DataFrame(columns=['event_id', 'telegram_id', 'fio', 'status', 'prichina_neyavki'])
            df_regs.to_excel(writer, sheet_name='registrations', index=False)
        return

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –ª–∏—Å—Ç—ã
    try:
        with pd.ExcelFile(FILE_PUT) as xls:
            existing_sheets = xls.sheet_names
    except Exception:
        existing_sheets = [] # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω
        
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'append' —Ä–µ–∂–∏–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–∏—Å—Ç–æ–≤
    with pd.ExcelWriter(FILE_PUT, engine='openpyxl', mode='a', if_sheet_exists='error') as writer:
        if 'events' not in existing_sheets:
            df_events = pd.DataFrame({
                'id': [1, 2], 'date': ['2023-10-27', '2023-10-28'],
                'center': ['–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏ –∏–º. –û.–ö. –ì–∞–≤—Ä–∏–ª–æ–≤–∞', '–¶–µ–Ω—Ç—Ä –∫—Ä–æ–≤–∏ –§–ú–ë–ê'], 
                'is_active': [True, False], 
                'reg_link_external': ['https://it.mephi.ru/web/guest/den-donora', 'https://it.mephi.ru/web/guest/den-donora-2']
            })
            df_events.to_excel(writer, sheet_name='events', index=False)

        if 'registrations' not in existing_sheets:
            df_regs = pd.DataFrame(columns=['event_id', 'telegram_id', 'fio', 'status', 'prichina_neyavki'])
            df_regs.to_excel(writer, sheet_name='registrations', index=False)

def poluchit_aktivnye_sobytiya():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π."""
    try:
        df = pd.read_excel(FILE_PUT, sheet_name='events')
        active_events = df[df['is_active'] == True]
        return active_events.to_dict('records')
    except (FileNotFoundError, ValueError): # ValueError –µ—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        return []

def poluchit_sobytie_po_id(event_id):
    try:
        df = pd.read_excel(FILE_PUT, sheet_name='events')
        event = df[df['id'] == event_id]
        if not event.empty:
            return event.iloc[0]
    except Exception:
        return None

def proverit_registraciyu_na_sobytie(telegram_id, event_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ."""
    try:
        df = pd.read_excel(FILE_PUT, sheet_name='registrations')
        df['telegram_id'] = df['telegram_id'].astype(str)
        registration = df[(df['telegram_id'] == str(telegram_id)) & (df['event_id'] == event_id)]
        return not registration.empty
    except Exception:
        return False

def dobavit_registraciyu(event_id, telegram_id, fio):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª."""
    try:
        all_sheets = pd.read_excel(FILE_PUT, sheet_name=None)
        
        df_regs = all_sheets.get('registrations', pd.DataFrame(columns=['event_id', 'telegram_id', 'fio', 'status', 'prichina_neyavki']))

        new_reg = {'event_id': event_id, 'telegram_id': str(telegram_id), 'fio': fio, 'status': 'registered'}
        
        df_regs = pd.concat([df_regs, pd.DataFrame([new_reg])], ignore_index=True)
        
        all_sheets['registrations'] = df_regs
        with pd.ExcelWriter(FILE_PUT, engine='openpyxl') as writer:
            for sheet_name, data in all_sheets.items():
                data.to_excel(writer, sheet_name=sheet_name, index=False)
    except FileNotFoundError:
        df_regs = pd.DataFrame([{'event_id': event_id, 'telegram_id': str(telegram_id), 'fio': fio, 'status': 'registered'}])
        with pd.ExcelWriter(FILE_PUT, engine='openpyxl') as writer:
            df_regs.to_excel(writer, sheet_name='registrations', index=False)

def obnovit_status_registracii(telegram_id, event_id, prichina):
    try:
        all_sheets = pd.read_excel(FILE_PUT, sheet_name=None)
        if 'registrations' not in all_sheets: return
        
        df_regs = all_sheets['registrations']
        mask = (df_regs['telegram_id'].astype(str) == str(telegram_id)) & (df_regs['event_id'] == event_id)
        idx = df_regs.index[mask].tolist()
        if idx:
            df_regs.loc[idx[0], 'status'] = 'not_attended'
            df_regs.loc[idx[0], 'prichina_neyavki'] = prichina
        all_sheets['registrations'] = df_regs
        with pd.ExcelWriter(FILE_PUT, engine='openpyxl') as writer:
            for sheet_name, data in all_sheets.items():
                data.to_excel(writer, sheet_name=sheet_name, index=False)
    except Exception:
        pass

def poluchit_registracii_usera(telegram_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        df_regs = pd.read_excel(FILE_PUT, sheet_name='registrations')
        # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'registered'
        user_regs = df_regs[(df_regs['telegram_id'].astype(str) == str(telegram_id)) & (df_regs['status'] == 'registered')]
        return user_regs.to_dict('records')
    except (FileNotFoundError, ValueError):
        return []

# --- –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –≥—Ä—É–ø–ø–∞—Ö ---
@dp.message(F.text.startswith("/"), F.chat.type.in_(["group", "supergroup"]))
async def ignore_group_commands(message: types.Message):
    return

# --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ ---
@dp.message(F.text.casefold() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def go_main_menu(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    sozdat_listy_v_excel()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω") 
