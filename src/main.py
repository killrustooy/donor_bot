import asyncio
import logging
import pandas as pd
import re
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove

logging.basicConfig(level=logging.INFO)
bot = Bot(token='8104630789:AAGAZ-ITfW3F0Rtno-h8iFUIiKqkxl1gqu0')
dp = Dispatcher()
FILE_PUT = "donors.xlsx"

# ID —á–∞—Ç–∞, –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "-1002709368305"))

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
menu_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–í–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º")]],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
knopka_dlya_nomera = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –Ω–æ–º–µ—Ä üì±", request_contact=True)]],
    resize_keyboard=True
)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---

class SostoyaniyaRegistracii(StatesGroup):
    ozhidanie_soglasiya = State()
    ozhidanie_fio = State()
    ozhidanie_kategorii = State()
    ozhidanie_gruppy = State()
    podtverzhdenie_fio = State()


class SostoyaniyaVoprosa(StatesGroup):
    ozhidanie_voprosa = State()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–∏—è
knopki_soglasiya = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è", callback_data="soglasen")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
knopki_kategoriy = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç—É–¥–µ–Ω—Ç", callback_data="kategoriya_student")],
        [InlineKeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫", callback_data="kategoriya_sotrudnik")],
        [InlineKeyboardButton(text="–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä", callback_data="kategoriya_vneshniy")]
    ]
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ò–û
knopki_podtverzhdeniya_fio = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞, —ç—Ç–æ —è", callback_data="fio_verno")],
        [InlineKeyboardButton(text="–ù–µ—Ç, —ç—Ç–æ –Ω–µ —è", callback_data="fio_neverno")]
    ]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def nayti_usera_po_nomeru(nomer_telefona):
    try:
        baza_dannyh = pd.read_excel(FILE_PUT, engine='openpyxl')
        baza_dannyh['–¢–µ–ª–µ—Ñ–æ–Ω'] = baza_dannyh['–¢–µ–ª–µ—Ñ–æ–Ω'].astype(str).str.replace(r'\D', '', regex=True)
        user = baza_dannyh[baza_dannyh['–¢–µ–ª–µ—Ñ–æ–Ω'].str.contains(nomer_telefona, na=False)]
        if not user.empty:
            return user.iloc[0]
    except FileNotFoundError:
        print(f"–û–®–ò–ë–ö–ê: –§–∞–π–ª {FILE_PUT} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def dobavit_usera(dannie):
    try:
        baza_dannyh = pd.read_excel(FILE_PUT, engine='openpyxl')
    except FileNotFoundError:
        baza_dannyh = pd.DataFrame(columns=['–§–ò–û', '–ì—Ä—É–ø–ø–∞', '–¢–µ–ª–µ—Ñ–æ–Ω'])
    
    noviy_user = pd.DataFrame([dannie])
    baza_dannyh = pd.concat([baza_dannyh, noviy_user], ignore_index=True)
    baza_dannyh.to_excel(FILE_PUT, index=False)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def command_start(message: types.Message, state: FSMContext):
    await state.clear() # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–Ω–æ—Ä–æ–≤. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –º–Ω–µ –Ω—É–∂–µ–Ω —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        reply_markup=knopka_dlya_nomera
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç
@dp.message(F.contact)
async def contact_handler(message: types.Message, state: FSMContext):
    nomer_telefona = message.contact.phone_number.replace("+", "")
    await state.update_data(nomer_telefona=nomer_telefona, username=message.from_user.username)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∏ username
    
    # —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await message.answer("–°–ø–∞—Å–∏–±–æ, –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω!", reply_markup=ReplyKeyboardRemove())
    
    user = nayti_usera_po_nomeru(nomer_telefona)
    
    if user is not None:
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ
        fio = user['–§–ò–û']
        await state.update_data(fio=fio)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã - {fio}?", reply_markup=knopki_podtverzhdeniya_fio)
        await state.set_state(SostoyaniyaRegistracii.podtverzhdenie_fio)
    else:
        await message.answer(
            "–ü–æ—Ö–æ–∂–µ, —Ç—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å "
            "[–ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://telegra.ph/POLITIKA-NIYAU-MIFI-V-OTNOSHENII-OBRABOTKI-PERSONALNYH-DANNYH-07-18) " 
            "–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="Markdown",
            disable_web_page_preview=True, # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥—Ä–æ–º–æ–∑–¥–∫–æ
            reply_markup=knopki_soglasiya
        )
        await state.set_state(SostoyaniyaRegistracii.ozhidanie_soglasiya)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω–∏–º–∞—é —É—Å–ª–æ–≤–∏—è"
@dp.callback_query(SostoyaniyaRegistracii.ozhidanie_soglasiya, F.data == "soglasen")
async def obrabotchik_soglasiya(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–∏ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ.")
    await state.set_state(SostoyaniyaRegistracii.ozhidanie_fio)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –§–ò–û
@dp.callback_query(SostoyaniyaRegistracii.podtverzhdenie_fio)
async def obrabotchik_podtverzhdeniya_fio(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'fio_verno':
        await callback.message.edit_text("–û—Ç–ª–∏—á–Ω–æ! –†–∞–¥ —Å–Ω–æ–≤–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.")
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(None)
        await bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)
    else:
        # –ï—Å–ª–∏ —é–∑–µ—Ä —Å–∫–∞–∑–∞–ª "–Ω–µ—Ç, —ç—Ç–æ –Ω–µ —è", –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ
        await callback.message.edit_text("–ü–æ–Ω—è–ª. –î–∞–≤–∞–π —Ç–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
        await callback.message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å "
            "[–ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö](https://telegra.ph/POLITIKA-NIYAU-MIFI-V-OTNOSHENII-OBRABOTKI-PERSONALNYH-DANNYH-07-18) "
            "–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            parse_mode="Markdown",
            disable_web_page_preview=True, # –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≥—Ä–æ–º–æ–∑–¥–∫–æ
            reply_markup=knopki_soglasiya
        )
        await state.set_state(SostoyaniyaRegistracii.ozhidanie_soglasiya)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –§–ò–û
@dp.message(SostoyaniyaRegistracii.ozhidanie_fio)
async def obrabotchik_fio(message: types.Message, state: FSMContext):
    fio = message.text.strip()
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∏–ª–∏ 3)
    if not (2 <= len(fio.split()) <= 3):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –ø–æ–ª–Ω–æ–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –§–∞–º–∏–ª–∏—é –∏ –ò–º—è).")
        return
        
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã)
    if re.search(r'[^–∞-—è–ê-–Ø—ë–Å\s-]', fio):
        await message.answer("–í –§–ò–û –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        return

    # –ü—Ä–∏–≤–æ–¥–∏–º –§–ò–û –∫ –∫—Ä–∞—Å–∏–≤–æ–º—É –≤–∏–¥—É: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω-–ü–µ—Ç—Ä–æ–≤–∏—á"
    fio_krasivoe = " ".join([word.capitalize() for word in fio.split()])
    
    await state.update_data(fio=fio_krasivoe)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=knopki_kategoriy)
    await state.set_state(SostoyaniyaRegistracii.ozhidanie_kategorii)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç–æ–º –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(SostoyaniyaRegistracii.ozhidanie_kategorii)
async def nepravilnaya_kategoriya(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ.")

# –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(SostoyaniyaRegistracii.ozhidanie_kategorii)
async def obrabotchik_kategorii(callback: types.CallbackQuery, state: FSMContext):
    kategoriya_eng = callback.data.split('_')[1] # –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º 'student', 'sotrudnik' –∏–ª–∏ 'vneshniy'
    await state.update_data(kategoriya=kategoriya_eng)
    
    if kategoriya_eng == "student":
        await callback.message.edit_text("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã.")
        await state.set_state(SostoyaniyaRegistracii.ozhidanie_gruppy)
    else:
        dannie_usera = await state.get_data()
        
        # –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        kategorii_map = {
            'sotrudnik': '–°–æ—Ç—Ä—É–¥–Ω–∏–∫',
            'vneshniy': '–í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä'
        }
        kategoriya_rus = kategorii_map.get(dannie_usera.get('kategoriya'), '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        
        zapis = {
            '–¢–µ–ª–µ—Ñ–æ–Ω': dannie_usera.get('nomer_telefona'),
            '–§–ò–û': dannie_usera.get('fio'),
            '–ì—Ä—É–ø–ø–∞': kategoriya_rus,
        }
        dobavit_usera(zapis)
        
        await callback.message.edit_text("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
        # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await state.set_state(None)
        await bot.send_message(callback.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
@dp.message(SostoyaniyaRegistracii.ozhidanie_gruppy)
async def obrabotchik_gruppy(message: types.Message, state: FSMContext):
    gruppa = message.text.strip().upper()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê22-501)
    if not re.match(r'^[–ê-–Ø]\d{2}-\d{3}$', gruppa):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ X00-000, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ê22-501")
        return

    await state.update_data(gruppa=gruppa)
    
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—á—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    dannie_usera = await state.get_data()
    
    zapis = {
        '–¢–µ–ª–µ—Ñ–æ–Ω': dannie_usera.get('nomer_telefona'),
        '–§–ò–û': dannie_usera.get('fio'),
        '–ì—Ä—É–ø–ø–∞': dannie_usera.get('gruppa'),
        # ... –∏ –¥—Ä—É–≥–∏–µ –∫–æ–ª–æ–Ω–∫–∏
    }
    dobavit_usera(zapis)
    
    await message.answer("–¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    # –∏ —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(None)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

# --- –í–æ–ø—Ä–æ—Å—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º ---

@dp.message(lambda msg: msg.text == "–í–æ–ø—Ä–æ—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º")
async def start_question(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SostoyaniyaVoprosa.ozhidanie_voprosa)


@dp.message(SostoyaniyaVoprosa.ozhidanie_voprosa)
async def recieve_question(message: types.Message, state: FSMContext):
    dannie_usera = await state.get_data()
    phone = dannie_usera.get("nomer_telefona", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    fio = dannie_usera.get("fio", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    username = dannie_usera.get("username") or message.from_user.username or "–Ω–µ—Ç username"

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞
    await bot.forward_message(ADMIN_CHAT_ID, message.chat.id, message.message_id)
    await bot.send_message(ADMIN_CHAT_ID, f"–í–æ–ø—Ä–æ—Å –æ—Ç {fio} (—Ç–µ–ª: {phone}, @{username})")

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º.", reply_markup=menu_kb)
    await state.set_state(None)


@dp.message(F.chat.id == ADMIN_CHAT_ID, F.reply_to_message)
async def answer_to_user(message: types.Message):
    # –ï—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if message.reply_to_message and message.reply_to_message.forward_from:
        user_id = message.reply_to_message.forward_from.id
        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:\n{message.text}")
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
